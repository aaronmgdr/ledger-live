/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface AccountsInterface extends utils.Interface {
  functions: {
    "EIP712_AUTHORIZE_SIGNER_TYPEHASH()": FunctionFragment;
    "authorizedBy(address)": FunctionFragment;
    "eip712DomainSeparator()": FunctionFragment;
    "initialized()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "offchainStorageRoots(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "registry()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setRegistry(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "getVersionNumber()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "setEip712DomainSeparator()": FunctionFragment;
    "setAccount(string,bytes,address,uint8,bytes32,bytes32)": FunctionFragment;
    "createAccount()": FunctionFragment;
    "setName(string)": FunctionFragment;
    "setWalletAddress(address,uint8,bytes32,bytes32)": FunctionFragment;
    "setAccountDataEncryptionKey(bytes)": FunctionFragment;
    "setMetadataURL(string)": FunctionFragment;
    "addStorageRoot(bytes)": FunctionFragment;
    "removeStorageRoot(uint256)": FunctionFragment;
    "getOffchainStorageRoots(address)": FunctionFragment;
    "setPaymentDelegation(address,uint256)": FunctionFragment;
    "deletePaymentDelegation()": FunctionFragment;
    "getPaymentDelegation(address)": FunctionFragment;
    "setIndexedSigner(address,bytes32)": FunctionFragment;
    "authorizeSignerWithSignature(address,bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "authorizeVoteSigner(address,uint8,bytes32,bytes32)": FunctionFragment;
    "authorizeValidatorSigner(address,uint8,bytes32,bytes32)": FunctionFragment;
    "authorizeValidatorSignerWithPublicKey(address,uint8,bytes32,bytes32,bytes)": FunctionFragment;
    "authorizeValidatorSignerWithKeys(address,uint8,bytes32,bytes32,bytes,bytes,bytes)": FunctionFragment;
    "authorizeAttestationSigner(address,uint8,bytes32,bytes32)": FunctionFragment;
    "authorizeSigner(address,bytes32)": FunctionFragment;
    "completeSignerAuthorization(address,bytes32)": FunctionFragment;
    "isLegacySigner(address,address,bytes32)": FunctionFragment;
    "isDefaultSigner(address,address,bytes32)": FunctionFragment;
    "isIndexedSigner(address,address,bytes32)": FunctionFragment;
    "isSigner(address,address,bytes32)": FunctionFragment;
    "removeDefaultSigner(bytes32)": FunctionFragment;
    "removeIndexedSigner(bytes32)": FunctionFragment;
    "removeSigner(address,bytes32)": FunctionFragment;
    "removeVoteSigner()": FunctionFragment;
    "removeValidatorSigner()": FunctionFragment;
    "removeAttestationSigner()": FunctionFragment;
    "attestationSignerToAccount(address)": FunctionFragment;
    "validatorSignerToAccount(address)": FunctionFragment;
    "voteSignerToAccount(address)": FunctionFragment;
    "signerToAccount(address)": FunctionFragment;
    "isLegacyRole(bytes32)": FunctionFragment;
    "getLegacySigner(address,bytes32)": FunctionFragment;
    "getDefaultSigner(address,bytes32)": FunctionFragment;
    "getIndexedSigner(address,bytes32)": FunctionFragment;
    "getVoteSigner(address)": FunctionFragment;
    "getValidatorSigner(address)": FunctionFragment;
    "getAttestationSigner(address)": FunctionFragment;
    "hasLegacySigner(address,bytes32)": FunctionFragment;
    "hasDefaultSigner(address,bytes32)": FunctionFragment;
    "hasIndexedSigner(address,bytes32)": FunctionFragment;
    "hasAuthorizedSigner(address,string)": FunctionFragment;
    "hasAuthorizedVoteSigner(address)": FunctionFragment;
    "hasAuthorizedValidatorSigner(address)": FunctionFragment;
    "hasAuthorizedAttestationSigner(address)": FunctionFragment;
    "getName(address)": FunctionFragment;
    "getMetadataURL(address)": FunctionFragment;
    "batchGetMetadataURL(address[])": FunctionFragment;
    "getDataEncryptionKey(address)": FunctionFragment;
    "getWalletAddress(address)": FunctionFragment;
    "isAccount(address)": FunctionFragment;
    "isAuthorizedSigner(address)": FunctionFragment;
    "getRoleAuthorizationSigner(address,address,bytes32,uint8,bytes32,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EIP712_AUTHORIZE_SIGNER_TYPEHASH"
      | "authorizedBy"
      | "eip712DomainSeparator"
      | "initialized"
      | "isOwner"
      | "offchainStorageRoots"
      | "owner"
      | "registry"
      | "renounceOwnership"
      | "setRegistry"
      | "transferOwnership"
      | "getVersionNumber"
      | "initialize"
      | "setEip712DomainSeparator"
      | "setAccount"
      | "createAccount"
      | "setName"
      | "setWalletAddress"
      | "setAccountDataEncryptionKey"
      | "setMetadataURL"
      | "addStorageRoot"
      | "removeStorageRoot"
      | "getOffchainStorageRoots"
      | "setPaymentDelegation"
      | "deletePaymentDelegation"
      | "getPaymentDelegation"
      | "setIndexedSigner"
      | "authorizeSignerWithSignature"
      | "authorizeVoteSigner"
      | "authorizeValidatorSigner"
      | "authorizeValidatorSignerWithPublicKey"
      | "authorizeValidatorSignerWithKeys"
      | "authorizeAttestationSigner"
      | "authorizeSigner"
      | "completeSignerAuthorization"
      | "isLegacySigner"
      | "isDefaultSigner"
      | "isIndexedSigner"
      | "isSigner"
      | "removeDefaultSigner"
      | "removeIndexedSigner"
      | "removeSigner"
      | "removeVoteSigner"
      | "removeValidatorSigner"
      | "removeAttestationSigner"
      | "attestationSignerToAccount"
      | "validatorSignerToAccount"
      | "voteSignerToAccount"
      | "signerToAccount"
      | "isLegacyRole"
      | "getLegacySigner"
      | "getDefaultSigner"
      | "getIndexedSigner"
      | "getVoteSigner"
      | "getValidatorSigner"
      | "getAttestationSigner"
      | "hasLegacySigner"
      | "hasDefaultSigner"
      | "hasIndexedSigner"
      | "hasAuthorizedSigner"
      | "hasAuthorizedVoteSigner"
      | "hasAuthorizedValidatorSigner"
      | "hasAuthorizedAttestationSigner"
      | "getName"
      | "getMetadataURL"
      | "batchGetMetadataURL"
      | "getDataEncryptionKey"
      | "getWalletAddress"
      | "isAccount"
      | "isAuthorizedSigner"
      | "getRoleAuthorizationSigner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "EIP712_AUTHORIZE_SIGNER_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedBy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712DomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "offchainStorageRoots",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setRegistry", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersionNumber",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setEip712DomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAccount",
    values: [string, BytesLike, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createAccount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setWalletAddress",
    values: [string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountDataEncryptionKey",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadataURL",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addStorageRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStorageRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOffchainStorageRoots",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentDelegation",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deletePaymentDelegation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentDelegation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIndexedSigner",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeSignerWithSignature",
    values: [string, BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeVoteSigner",
    values: [string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeValidatorSigner",
    values: [string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeValidatorSignerWithPublicKey",
    values: [string, BigNumberish, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeValidatorSignerWithKeys",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeAttestationSigner",
    values: [string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeSigner",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "completeSignerAuthorization",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isLegacySigner",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDefaultSigner",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isIndexedSigner",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSigner",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDefaultSigner",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeIndexedSigner",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSigner",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVoteSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeValidatorSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAttestationSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "attestationSignerToAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorSignerToAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "voteSignerToAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "signerToAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isLegacyRole",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLegacySigner",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultSigner",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexedSigner",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteSigner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorSigner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttestationSigner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasLegacySigner",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasDefaultSigner",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasIndexedSigner",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAuthorizedSigner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAuthorizedVoteSigner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAuthorizedValidatorSigner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAuthorizedAttestationSigner",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getMetadataURL",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchGetMetadataURL",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataEncryptionKey",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isAccount", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedSigner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAuthorizationSigner",
    values: [string, string, BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "EIP712_AUTHORIZE_SIGNER_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712DomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offchainStorageRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVersionNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEip712DomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccountDataEncryptionKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadataURL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addStorageRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStorageRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOffchainStorageRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deletePaymentDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIndexedSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeSignerWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeVoteSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeValidatorSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeValidatorSignerWithPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeValidatorSignerWithKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeAttestationSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeSignerAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLegacySigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDefaultSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isIndexedSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeDefaultSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeIndexedSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVoteSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeValidatorSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAttestationSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attestationSignerToAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorSignerToAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteSignerToAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signerToAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLegacyRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLegacySigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndexedSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttestationSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasLegacySigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasDefaultSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasIndexedSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAuthorizedSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAuthorizedVoteSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAuthorizedValidatorSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAuthorizedAttestationSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMetadataURL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchGetMetadataURL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataEncryptionKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAuthorizationSigner",
    data: BytesLike
  ): Result;

  events: {
    "AccountCreated(address)": EventFragment;
    "AccountDataEncryptionKeySet(address,bytes)": EventFragment;
    "AccountMetadataURLSet(address,string)": EventFragment;
    "AccountNameSet(address,string)": EventFragment;
    "AccountWalletAddressSet(address,address)": EventFragment;
    "AttestationSignerAuthorized(address,address)": EventFragment;
    "AttestationSignerRemoved(address,address)": EventFragment;
    "DefaultSignerRemoved(address,address,bytes32)": EventFragment;
    "DefaultSignerSet(address,address,bytes32)": EventFragment;
    "IndexedSignerRemoved(address,address,bytes32)": EventFragment;
    "IndexedSignerSet(address,address,bytes32)": EventFragment;
    "LegacySignerRemoved(address,address,bytes32)": EventFragment;
    "LegacySignerSet(address,address,bytes32)": EventFragment;
    "OffchainStorageRootAdded(address,bytes)": EventFragment;
    "OffchainStorageRootRemoved(address,bytes,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PaymentDelegationSet(address,uint256)": EventFragment;
    "RegistrySet(address)": EventFragment;
    "SignerAuthorizationCompleted(address,address,bytes32)": EventFragment;
    "SignerAuthorizationStarted(address,address,bytes32)": EventFragment;
    "SignerAuthorized(address,address,bytes32)": EventFragment;
    "SignerRemoved(address,address,bytes32)": EventFragment;
    "ValidatorSignerAuthorized(address,address)": EventFragment;
    "ValidatorSignerRemoved(address,address)": EventFragment;
    "VoteSignerAuthorized(address,address)": EventFragment;
    "VoteSignerRemoved(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AccountDataEncryptionKeySet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountMetadataURLSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountNameSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountWalletAddressSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AttestationSignerAuthorized"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AttestationSignerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefaultSignerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DefaultSignerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IndexedSignerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IndexedSignerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LegacySignerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LegacySignerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OffchainStorageRootAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OffchainStorageRootRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentDelegationSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistrySet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SignerAuthorizationCompleted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignerAuthorizationStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignerAuthorized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorSignerAuthorized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorSignerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteSignerAuthorized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteSignerRemoved"): EventFragment;
}

export interface AccountCreatedEventObject {
  account: string;
}
export type AccountCreatedEvent = TypedEvent<
  [string],
  AccountCreatedEventObject
>;

export type AccountCreatedEventFilter = TypedEventFilter<AccountCreatedEvent>;

export interface AccountDataEncryptionKeySetEventObject {
  account: string;
  dataEncryptionKey: string;
}
export type AccountDataEncryptionKeySetEvent = TypedEvent<
  [string, string],
  AccountDataEncryptionKeySetEventObject
>;

export type AccountDataEncryptionKeySetEventFilter =
  TypedEventFilter<AccountDataEncryptionKeySetEvent>;

export interface AccountMetadataURLSetEventObject {
  account: string;
  metadataURL: string;
}
export type AccountMetadataURLSetEvent = TypedEvent<
  [string, string],
  AccountMetadataURLSetEventObject
>;

export type AccountMetadataURLSetEventFilter =
  TypedEventFilter<AccountMetadataURLSetEvent>;

export interface AccountNameSetEventObject {
  account: string;
  name: string;
}
export type AccountNameSetEvent = TypedEvent<
  [string, string],
  AccountNameSetEventObject
>;

export type AccountNameSetEventFilter = TypedEventFilter<AccountNameSetEvent>;

export interface AccountWalletAddressSetEventObject {
  account: string;
  walletAddress: string;
}
export type AccountWalletAddressSetEvent = TypedEvent<
  [string, string],
  AccountWalletAddressSetEventObject
>;

export type AccountWalletAddressSetEventFilter =
  TypedEventFilter<AccountWalletAddressSetEvent>;

export interface AttestationSignerAuthorizedEventObject {
  account: string;
  signer: string;
}
export type AttestationSignerAuthorizedEvent = TypedEvent<
  [string, string],
  AttestationSignerAuthorizedEventObject
>;

export type AttestationSignerAuthorizedEventFilter =
  TypedEventFilter<AttestationSignerAuthorizedEvent>;

export interface AttestationSignerRemovedEventObject {
  account: string;
  oldSigner: string;
}
export type AttestationSignerRemovedEvent = TypedEvent<
  [string, string],
  AttestationSignerRemovedEventObject
>;

export type AttestationSignerRemovedEventFilter =
  TypedEventFilter<AttestationSignerRemovedEvent>;

export interface DefaultSignerRemovedEventObject {
  account: string;
  oldSigner: string;
  role: string;
}
export type DefaultSignerRemovedEvent = TypedEvent<
  [string, string, string],
  DefaultSignerRemovedEventObject
>;

export type DefaultSignerRemovedEventFilter =
  TypedEventFilter<DefaultSignerRemovedEvent>;

export interface DefaultSignerSetEventObject {
  account: string;
  signer: string;
  role: string;
}
export type DefaultSignerSetEvent = TypedEvent<
  [string, string, string],
  DefaultSignerSetEventObject
>;

export type DefaultSignerSetEventFilter =
  TypedEventFilter<DefaultSignerSetEvent>;

export interface IndexedSignerRemovedEventObject {
  account: string;
  oldSigner: string;
  role: string;
}
export type IndexedSignerRemovedEvent = TypedEvent<
  [string, string, string],
  IndexedSignerRemovedEventObject
>;

export type IndexedSignerRemovedEventFilter =
  TypedEventFilter<IndexedSignerRemovedEvent>;

export interface IndexedSignerSetEventObject {
  account: string;
  signer: string;
  role: string;
}
export type IndexedSignerSetEvent = TypedEvent<
  [string, string, string],
  IndexedSignerSetEventObject
>;

export type IndexedSignerSetEventFilter =
  TypedEventFilter<IndexedSignerSetEvent>;

export interface LegacySignerRemovedEventObject {
  account: string;
  oldSigner: string;
  role: string;
}
export type LegacySignerRemovedEvent = TypedEvent<
  [string, string, string],
  LegacySignerRemovedEventObject
>;

export type LegacySignerRemovedEventFilter =
  TypedEventFilter<LegacySignerRemovedEvent>;

export interface LegacySignerSetEventObject {
  account: string;
  signer: string;
  role: string;
}
export type LegacySignerSetEvent = TypedEvent<
  [string, string, string],
  LegacySignerSetEventObject
>;

export type LegacySignerSetEventFilter = TypedEventFilter<LegacySignerSetEvent>;

export interface OffchainStorageRootAddedEventObject {
  account: string;
  url: string;
}
export type OffchainStorageRootAddedEvent = TypedEvent<
  [string, string],
  OffchainStorageRootAddedEventObject
>;

export type OffchainStorageRootAddedEventFilter =
  TypedEventFilter<OffchainStorageRootAddedEvent>;

export interface OffchainStorageRootRemovedEventObject {
  account: string;
  url: string;
  index: BigNumber;
}
export type OffchainStorageRootRemovedEvent = TypedEvent<
  [string, string, BigNumber],
  OffchainStorageRootRemovedEventObject
>;

export type OffchainStorageRootRemovedEventFilter =
  TypedEventFilter<OffchainStorageRootRemovedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PaymentDelegationSetEventObject {
  beneficiary: string;
  fraction: BigNumber;
}
export type PaymentDelegationSetEvent = TypedEvent<
  [string, BigNumber],
  PaymentDelegationSetEventObject
>;

export type PaymentDelegationSetEventFilter =
  TypedEventFilter<PaymentDelegationSetEvent>;

export interface RegistrySetEventObject {
  registryAddress: string;
}
export type RegistrySetEvent = TypedEvent<[string], RegistrySetEventObject>;

export type RegistrySetEventFilter = TypedEventFilter<RegistrySetEvent>;

export interface SignerAuthorizationCompletedEventObject {
  account: string;
  signer: string;
  role: string;
}
export type SignerAuthorizationCompletedEvent = TypedEvent<
  [string, string, string],
  SignerAuthorizationCompletedEventObject
>;

export type SignerAuthorizationCompletedEventFilter =
  TypedEventFilter<SignerAuthorizationCompletedEvent>;

export interface SignerAuthorizationStartedEventObject {
  account: string;
  signer: string;
  role: string;
}
export type SignerAuthorizationStartedEvent = TypedEvent<
  [string, string, string],
  SignerAuthorizationStartedEventObject
>;

export type SignerAuthorizationStartedEventFilter =
  TypedEventFilter<SignerAuthorizationStartedEvent>;

export interface SignerAuthorizedEventObject {
  account: string;
  signer: string;
  role: string;
}
export type SignerAuthorizedEvent = TypedEvent<
  [string, string, string],
  SignerAuthorizedEventObject
>;

export type SignerAuthorizedEventFilter =
  TypedEventFilter<SignerAuthorizedEvent>;

export interface SignerRemovedEventObject {
  account: string;
  oldSigner: string;
  role: string;
}
export type SignerRemovedEvent = TypedEvent<
  [string, string, string],
  SignerRemovedEventObject
>;

export type SignerRemovedEventFilter = TypedEventFilter<SignerRemovedEvent>;

export interface ValidatorSignerAuthorizedEventObject {
  account: string;
  signer: string;
}
export type ValidatorSignerAuthorizedEvent = TypedEvent<
  [string, string],
  ValidatorSignerAuthorizedEventObject
>;

export type ValidatorSignerAuthorizedEventFilter =
  TypedEventFilter<ValidatorSignerAuthorizedEvent>;

export interface ValidatorSignerRemovedEventObject {
  account: string;
  oldSigner: string;
}
export type ValidatorSignerRemovedEvent = TypedEvent<
  [string, string],
  ValidatorSignerRemovedEventObject
>;

export type ValidatorSignerRemovedEventFilter =
  TypedEventFilter<ValidatorSignerRemovedEvent>;

export interface VoteSignerAuthorizedEventObject {
  account: string;
  signer: string;
}
export type VoteSignerAuthorizedEvent = TypedEvent<
  [string, string],
  VoteSignerAuthorizedEventObject
>;

export type VoteSignerAuthorizedEventFilter =
  TypedEventFilter<VoteSignerAuthorizedEvent>;

export interface VoteSignerRemovedEventObject {
  account: string;
  oldSigner: string;
}
export type VoteSignerRemovedEvent = TypedEvent<
  [string, string],
  VoteSignerRemovedEventObject
>;

export type VoteSignerRemovedEventFilter =
  TypedEventFilter<VoteSignerRemovedEvent>;

export interface Accounts extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AccountsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EIP712_AUTHORIZE_SIGNER_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    authorizedBy(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    eip712DomainSeparator(overrides?: CallOverrides): Promise<[string]>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    offchainStorageRoots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRegistry(
      registryAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getVersionNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    initialize(
      registryAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setEip712DomainSeparator(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAccount(
      name: string,
      dataEncryptionKey: BytesLike,
      walletAddress: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createAccount(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setName(
      name: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setWalletAddress(
      walletAddress: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAccountDataEncryptionKey(
      dataEncryptionKey: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMetadataURL(
      metadataURL: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addStorageRoot(
      url: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeStorageRoot(
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getOffchainStorageRoots(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber[]]>;

    setPaymentDelegation(
      beneficiary: string,
      fraction: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deletePaymentDelegation(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getPaymentDelegation(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    setIndexedSigner(
      signer: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    authorizeSignerWithSignature(
      signer: string,
      role: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    authorizeVoteSigner(
      signer: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    authorizeValidatorSigner(
      signer: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    authorizeValidatorSignerWithPublicKey(
      signer: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      ecdsaPublicKey: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    authorizeValidatorSignerWithKeys(
      signer: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      ecdsaPublicKey: BytesLike,
      blsPublicKey: BytesLike,
      blsPop: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    authorizeAttestationSigner(
      signer: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    authorizeSigner(
      signer: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    completeSignerAuthorization(
      account: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isLegacySigner(
      _account: string,
      signer: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isDefaultSigner(
      account: string,
      signer: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isIndexedSigner(
      account: string,
      signer: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSigner(
      account: string,
      signer: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeDefaultSigner(
      role: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeIndexedSigner(
      role: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeSigner(
      signer: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeVoteSigner(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeValidatorSigner(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeAttestationSigner(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    attestationSignerToAccount(
      signer: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    validatorSignerToAccount(
      signer: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    voteSignerToAccount(
      signer: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    signerToAccount(
      signer: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isLegacyRole(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getLegacySigner(
      _account: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDefaultSigner(
      account: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getIndexedSigner(
      account: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVoteSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getValidatorSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAttestationSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hasLegacySigner(
      account: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasDefaultSigner(
      account: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasIndexedSigner(
      account: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasAuthorizedSigner(
      account: string,
      role: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasAuthorizedVoteSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasAuthorizedValidatorSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasAuthorizedAttestationSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getName(account: string, overrides?: CallOverrides): Promise<[string]>;

    getMetadataURL(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    batchGetMetadataURL(
      accountsToQuery: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], string]>;

    getDataEncryptionKey(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getWalletAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isAccount(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isAuthorizedSigner(
      signer: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getRoleAuthorizationSigner(
      account: string,
      signer: string,
      role: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  EIP712_AUTHORIZE_SIGNER_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  authorizedBy(arg0: string, overrides?: CallOverrides): Promise<string>;

  eip712DomainSeparator(overrides?: CallOverrides): Promise<string>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  offchainStorageRoots(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRegistry(
    registryAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getVersionNumber(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  initialize(
    registryAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setEip712DomainSeparator(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAccount(
    name: string,
    dataEncryptionKey: BytesLike,
    walletAddress: string,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createAccount(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setName(
    name: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setWalletAddress(
    walletAddress: string,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAccountDataEncryptionKey(
    dataEncryptionKey: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMetadataURL(
    metadataURL: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addStorageRoot(
    url: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeStorageRoot(
    index: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getOffchainStorageRoots(
    account: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber[]]>;

  setPaymentDelegation(
    beneficiary: string,
    fraction: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deletePaymentDelegation(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getPaymentDelegation(
    account: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  setIndexedSigner(
    signer: string,
    role: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  authorizeSignerWithSignature(
    signer: string,
    role: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  authorizeVoteSigner(
    signer: string,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  authorizeValidatorSigner(
    signer: string,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  authorizeValidatorSignerWithPublicKey(
    signer: string,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    ecdsaPublicKey: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  authorizeValidatorSignerWithKeys(
    signer: string,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    ecdsaPublicKey: BytesLike,
    blsPublicKey: BytesLike,
    blsPop: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  authorizeAttestationSigner(
    signer: string,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  authorizeSigner(
    signer: string,
    role: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  completeSignerAuthorization(
    account: string,
    role: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isLegacySigner(
    _account: string,
    signer: string,
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isDefaultSigner(
    account: string,
    signer: string,
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isIndexedSigner(
    account: string,
    signer: string,
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSigner(
    account: string,
    signer: string,
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeDefaultSigner(
    role: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeIndexedSigner(
    role: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeSigner(
    signer: string,
    role: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeVoteSigner(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeValidatorSigner(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeAttestationSigner(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  attestationSignerToAccount(
    signer: string,
    overrides?: CallOverrides
  ): Promise<string>;

  validatorSignerToAccount(
    signer: string,
    overrides?: CallOverrides
  ): Promise<string>;

  voteSignerToAccount(
    signer: string,
    overrides?: CallOverrides
  ): Promise<string>;

  signerToAccount(signer: string, overrides?: CallOverrides): Promise<string>;

  isLegacyRole(role: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  getLegacySigner(
    _account: string,
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getDefaultSigner(
    account: string,
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getIndexedSigner(
    account: string,
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getVoteSigner(account: string, overrides?: CallOverrides): Promise<string>;

  getValidatorSigner(
    account: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getAttestationSigner(
    account: string,
    overrides?: CallOverrides
  ): Promise<string>;

  hasLegacySigner(
    account: string,
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasDefaultSigner(
    account: string,
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasIndexedSigner(
    account: string,
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasAuthorizedSigner(
    account: string,
    role: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasAuthorizedVoteSigner(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasAuthorizedValidatorSigner(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasAuthorizedAttestationSigner(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getName(account: string, overrides?: CallOverrides): Promise<string>;

  getMetadataURL(account: string, overrides?: CallOverrides): Promise<string>;

  batchGetMetadataURL(
    accountsToQuery: string[],
    overrides?: CallOverrides
  ): Promise<[BigNumber[], string]>;

  getDataEncryptionKey(
    account: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getWalletAddress(account: string, overrides?: CallOverrides): Promise<string>;

  isAccount(account: string, overrides?: CallOverrides): Promise<boolean>;

  isAuthorizedSigner(
    signer: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRoleAuthorizationSigner(
    account: string,
    signer: string,
    role: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    EIP712_AUTHORIZE_SIGNER_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    authorizedBy(arg0: string, overrides?: CallOverrides): Promise<string>;

    eip712DomainSeparator(overrides?: CallOverrides): Promise<string>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    offchainStorageRoots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setRegistry(
      registryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getVersionNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    initialize(
      registryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEip712DomainSeparator(overrides?: CallOverrides): Promise<void>;

    setAccount(
      name: string,
      dataEncryptionKey: BytesLike,
      walletAddress: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    createAccount(overrides?: CallOverrides): Promise<boolean>;

    setName(name: string, overrides?: CallOverrides): Promise<void>;

    setWalletAddress(
      walletAddress: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setAccountDataEncryptionKey(
      dataEncryptionKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetadataURL(
      metadataURL: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addStorageRoot(url: BytesLike, overrides?: CallOverrides): Promise<void>;

    removeStorageRoot(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getOffchainStorageRoots(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber[]]>;

    setPaymentDelegation(
      beneficiary: string,
      fraction: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deletePaymentDelegation(overrides?: CallOverrides): Promise<void>;

    getPaymentDelegation(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    setIndexedSigner(
      signer: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizeSignerWithSignature(
      signer: string,
      role: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizeVoteSigner(
      signer: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizeValidatorSigner(
      signer: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizeValidatorSignerWithPublicKey(
      signer: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      ecdsaPublicKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizeValidatorSignerWithKeys(
      signer: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      ecdsaPublicKey: BytesLike,
      blsPublicKey: BytesLike,
      blsPop: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizeAttestationSigner(
      signer: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizeSigner(
      signer: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    completeSignerAuthorization(
      account: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isLegacySigner(
      _account: string,
      signer: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDefaultSigner(
      account: string,
      signer: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isIndexedSigner(
      account: string,
      signer: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSigner(
      account: string,
      signer: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeDefaultSigner(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeIndexedSigner(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSigner(
      signer: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeVoteSigner(overrides?: CallOverrides): Promise<void>;

    removeValidatorSigner(overrides?: CallOverrides): Promise<void>;

    removeAttestationSigner(overrides?: CallOverrides): Promise<void>;

    attestationSignerToAccount(
      signer: string,
      overrides?: CallOverrides
    ): Promise<string>;

    validatorSignerToAccount(
      signer: string,
      overrides?: CallOverrides
    ): Promise<string>;

    voteSignerToAccount(
      signer: string,
      overrides?: CallOverrides
    ): Promise<string>;

    signerToAccount(signer: string, overrides?: CallOverrides): Promise<string>;

    isLegacyRole(role: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    getLegacySigner(
      _account: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getDefaultSigner(
      account: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getIndexedSigner(
      account: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getVoteSigner(account: string, overrides?: CallOverrides): Promise<string>;

    getValidatorSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getAttestationSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<string>;

    hasLegacySigner(
      account: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasDefaultSigner(
      account: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasIndexedSigner(
      account: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasAuthorizedSigner(
      account: string,
      role: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasAuthorizedVoteSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasAuthorizedValidatorSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasAuthorizedAttestationSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getName(account: string, overrides?: CallOverrides): Promise<string>;

    getMetadataURL(account: string, overrides?: CallOverrides): Promise<string>;

    batchGetMetadataURL(
      accountsToQuery: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[], string]>;

    getDataEncryptionKey(
      account: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getWalletAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<string>;

    isAccount(account: string, overrides?: CallOverrides): Promise<boolean>;

    isAuthorizedSigner(
      signer: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRoleAuthorizationSigner(
      account: string,
      signer: string,
      role: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AccountCreated(address)"(
      account?: string | null
    ): AccountCreatedEventFilter;
    AccountCreated(account?: string | null): AccountCreatedEventFilter;

    "AccountDataEncryptionKeySet(address,bytes)"(
      account?: string | null,
      dataEncryptionKey?: null
    ): AccountDataEncryptionKeySetEventFilter;
    AccountDataEncryptionKeySet(
      account?: string | null,
      dataEncryptionKey?: null
    ): AccountDataEncryptionKeySetEventFilter;

    "AccountMetadataURLSet(address,string)"(
      account?: string | null,
      metadataURL?: null
    ): AccountMetadataURLSetEventFilter;
    AccountMetadataURLSet(
      account?: string | null,
      metadataURL?: null
    ): AccountMetadataURLSetEventFilter;

    "AccountNameSet(address,string)"(
      account?: string | null,
      name?: null
    ): AccountNameSetEventFilter;
    AccountNameSet(
      account?: string | null,
      name?: null
    ): AccountNameSetEventFilter;

    "AccountWalletAddressSet(address,address)"(
      account?: string | null,
      walletAddress?: null
    ): AccountWalletAddressSetEventFilter;
    AccountWalletAddressSet(
      account?: string | null,
      walletAddress?: null
    ): AccountWalletAddressSetEventFilter;

    "AttestationSignerAuthorized(address,address)"(
      account?: string | null,
      signer?: null
    ): AttestationSignerAuthorizedEventFilter;
    AttestationSignerAuthorized(
      account?: string | null,
      signer?: null
    ): AttestationSignerAuthorizedEventFilter;

    "AttestationSignerRemoved(address,address)"(
      account?: string | null,
      oldSigner?: null
    ): AttestationSignerRemovedEventFilter;
    AttestationSignerRemoved(
      account?: string | null,
      oldSigner?: null
    ): AttestationSignerRemovedEventFilter;

    "DefaultSignerRemoved(address,address,bytes32)"(
      account?: string | null,
      oldSigner?: null,
      role?: null
    ): DefaultSignerRemovedEventFilter;
    DefaultSignerRemoved(
      account?: string | null,
      oldSigner?: null,
      role?: null
    ): DefaultSignerRemovedEventFilter;

    "DefaultSignerSet(address,address,bytes32)"(
      account?: string | null,
      signer?: null,
      role?: null
    ): DefaultSignerSetEventFilter;
    DefaultSignerSet(
      account?: string | null,
      signer?: null,
      role?: null
    ): DefaultSignerSetEventFilter;

    "IndexedSignerRemoved(address,address,bytes32)"(
      account?: string | null,
      oldSigner?: null,
      role?: null
    ): IndexedSignerRemovedEventFilter;
    IndexedSignerRemoved(
      account?: string | null,
      oldSigner?: null,
      role?: null
    ): IndexedSignerRemovedEventFilter;

    "IndexedSignerSet(address,address,bytes32)"(
      account?: string | null,
      signer?: null,
      role?: null
    ): IndexedSignerSetEventFilter;
    IndexedSignerSet(
      account?: string | null,
      signer?: null,
      role?: null
    ): IndexedSignerSetEventFilter;

    "LegacySignerRemoved(address,address,bytes32)"(
      account?: string | null,
      oldSigner?: null,
      role?: null
    ): LegacySignerRemovedEventFilter;
    LegacySignerRemoved(
      account?: string | null,
      oldSigner?: null,
      role?: null
    ): LegacySignerRemovedEventFilter;

    "LegacySignerSet(address,address,bytes32)"(
      account?: string | null,
      signer?: null,
      role?: null
    ): LegacySignerSetEventFilter;
    LegacySignerSet(
      account?: string | null,
      signer?: null,
      role?: null
    ): LegacySignerSetEventFilter;

    "OffchainStorageRootAdded(address,bytes)"(
      account?: string | null,
      url?: null
    ): OffchainStorageRootAddedEventFilter;
    OffchainStorageRootAdded(
      account?: string | null,
      url?: null
    ): OffchainStorageRootAddedEventFilter;

    "OffchainStorageRootRemoved(address,bytes,uint256)"(
      account?: string | null,
      url?: null,
      index?: null
    ): OffchainStorageRootRemovedEventFilter;
    OffchainStorageRootRemoved(
      account?: string | null,
      url?: null,
      index?: null
    ): OffchainStorageRootRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PaymentDelegationSet(address,uint256)"(
      beneficiary?: string | null,
      fraction?: null
    ): PaymentDelegationSetEventFilter;
    PaymentDelegationSet(
      beneficiary?: string | null,
      fraction?: null
    ): PaymentDelegationSetEventFilter;

    "RegistrySet(address)"(
      registryAddress?: string | null
    ): RegistrySetEventFilter;
    RegistrySet(registryAddress?: string | null): RegistrySetEventFilter;

    "SignerAuthorizationCompleted(address,address,bytes32)"(
      account?: string | null,
      signer?: null,
      role?: BytesLike | null
    ): SignerAuthorizationCompletedEventFilter;
    SignerAuthorizationCompleted(
      account?: string | null,
      signer?: null,
      role?: BytesLike | null
    ): SignerAuthorizationCompletedEventFilter;

    "SignerAuthorizationStarted(address,address,bytes32)"(
      account?: string | null,
      signer?: null,
      role?: BytesLike | null
    ): SignerAuthorizationStartedEventFilter;
    SignerAuthorizationStarted(
      account?: string | null,
      signer?: null,
      role?: BytesLike | null
    ): SignerAuthorizationStartedEventFilter;

    "SignerAuthorized(address,address,bytes32)"(
      account?: string | null,
      signer?: null,
      role?: BytesLike | null
    ): SignerAuthorizedEventFilter;
    SignerAuthorized(
      account?: string | null,
      signer?: null,
      role?: BytesLike | null
    ): SignerAuthorizedEventFilter;

    "SignerRemoved(address,address,bytes32)"(
      account?: string | null,
      oldSigner?: null,
      role?: BytesLike | null
    ): SignerRemovedEventFilter;
    SignerRemoved(
      account?: string | null,
      oldSigner?: null,
      role?: BytesLike | null
    ): SignerRemovedEventFilter;

    "ValidatorSignerAuthorized(address,address)"(
      account?: string | null,
      signer?: null
    ): ValidatorSignerAuthorizedEventFilter;
    ValidatorSignerAuthorized(
      account?: string | null,
      signer?: null
    ): ValidatorSignerAuthorizedEventFilter;

    "ValidatorSignerRemoved(address,address)"(
      account?: string | null,
      oldSigner?: null
    ): ValidatorSignerRemovedEventFilter;
    ValidatorSignerRemoved(
      account?: string | null,
      oldSigner?: null
    ): ValidatorSignerRemovedEventFilter;

    "VoteSignerAuthorized(address,address)"(
      account?: string | null,
      signer?: null
    ): VoteSignerAuthorizedEventFilter;
    VoteSignerAuthorized(
      account?: string | null,
      signer?: null
    ): VoteSignerAuthorizedEventFilter;

    "VoteSignerRemoved(address,address)"(
      account?: string | null,
      oldSigner?: null
    ): VoteSignerRemovedEventFilter;
    VoteSignerRemoved(
      account?: string | null,
      oldSigner?: null
    ): VoteSignerRemovedEventFilter;
  };

  estimateGas: {
    EIP712_AUTHORIZE_SIGNER_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authorizedBy(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    eip712DomainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    offchainStorageRoots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRegistry(
      registryAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getVersionNumber(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      registryAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setEip712DomainSeparator(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAccount(
      name: string,
      dataEncryptionKey: BytesLike,
      walletAddress: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createAccount(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setName(
      name: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setWalletAddress(
      walletAddress: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAccountDataEncryptionKey(
      dataEncryptionKey: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMetadataURL(
      metadataURL: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addStorageRoot(
      url: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeStorageRoot(
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getOffchainStorageRoots(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPaymentDelegation(
      beneficiary: string,
      fraction: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deletePaymentDelegation(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getPaymentDelegation(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setIndexedSigner(
      signer: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    authorizeSignerWithSignature(
      signer: string,
      role: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    authorizeVoteSigner(
      signer: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    authorizeValidatorSigner(
      signer: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    authorizeValidatorSignerWithPublicKey(
      signer: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      ecdsaPublicKey: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    authorizeValidatorSignerWithKeys(
      signer: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      ecdsaPublicKey: BytesLike,
      blsPublicKey: BytesLike,
      blsPop: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    authorizeAttestationSigner(
      signer: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    authorizeSigner(
      signer: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    completeSignerAuthorization(
      account: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isLegacySigner(
      _account: string,
      signer: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDefaultSigner(
      account: string,
      signer: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isIndexedSigner(
      account: string,
      signer: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSigner(
      account: string,
      signer: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeDefaultSigner(
      role: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeIndexedSigner(
      role: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeSigner(
      signer: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeVoteSigner(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeValidatorSigner(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeAttestationSigner(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    attestationSignerToAccount(
      signer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatorSignerToAccount(
      signer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voteSignerToAccount(
      signer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signerToAccount(
      signer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLegacyRole(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLegacySigner(
      _account: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefaultSigner(
      account: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndexedSigner(
      account: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoteSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAttestationSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasLegacySigner(
      account: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasDefaultSigner(
      account: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasIndexedSigner(
      account: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAuthorizedSigner(
      account: string,
      role: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAuthorizedVoteSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAuthorizedValidatorSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAuthorizedAttestationSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getName(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    getMetadataURL(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchGetMetadataURL(
      accountsToQuery: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDataEncryptionKey(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWalletAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAccount(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isAuthorizedSigner(
      signer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAuthorizationSigner(
      account: string,
      signer: string,
      role: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EIP712_AUTHORIZE_SIGNER_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authorizedBy(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eip712DomainSeparator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offchainStorageRoots(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRegistry(
      registryAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getVersionNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      registryAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setEip712DomainSeparator(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAccount(
      name: string,
      dataEncryptionKey: BytesLike,
      walletAddress: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createAccount(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setName(
      name: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setWalletAddress(
      walletAddress: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAccountDataEncryptionKey(
      dataEncryptionKey: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMetadataURL(
      metadataURL: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addStorageRoot(
      url: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeStorageRoot(
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getOffchainStorageRoots(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPaymentDelegation(
      beneficiary: string,
      fraction: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deletePaymentDelegation(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getPaymentDelegation(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setIndexedSigner(
      signer: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    authorizeSignerWithSignature(
      signer: string,
      role: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    authorizeVoteSigner(
      signer: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    authorizeValidatorSigner(
      signer: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    authorizeValidatorSignerWithPublicKey(
      signer: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      ecdsaPublicKey: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    authorizeValidatorSignerWithKeys(
      signer: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      ecdsaPublicKey: BytesLike,
      blsPublicKey: BytesLike,
      blsPop: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    authorizeAttestationSigner(
      signer: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    authorizeSigner(
      signer: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    completeSignerAuthorization(
      account: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isLegacySigner(
      _account: string,
      signer: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDefaultSigner(
      account: string,
      signer: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isIndexedSigner(
      account: string,
      signer: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSigner(
      account: string,
      signer: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeDefaultSigner(
      role: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeIndexedSigner(
      role: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeSigner(
      signer: string,
      role: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeVoteSigner(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeValidatorSigner(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeAttestationSigner(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    attestationSignerToAccount(
      signer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorSignerToAccount(
      signer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteSignerToAccount(
      signer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signerToAccount(
      signer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLegacyRole(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLegacySigner(
      _account: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefaultSigner(
      account: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIndexedSigner(
      account: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoteSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAttestationSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasLegacySigner(
      account: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasDefaultSigner(
      account: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasIndexedSigner(
      account: string,
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAuthorizedSigner(
      account: string,
      role: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAuthorizedVoteSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAuthorizedValidatorSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAuthorizedAttestationSigner(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getName(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMetadataURL(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchGetMetadataURL(
      accountsToQuery: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDataEncryptionKey(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWalletAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAccount(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAuthorizedSigner(
      signer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAuthorizationSigner(
      account: string,
      signer: string,
      role: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
