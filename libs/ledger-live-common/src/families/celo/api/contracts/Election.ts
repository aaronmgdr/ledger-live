/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ElectionInterface extends utils.Interface {
  functions: {
    "allowedToVoteOverMaxNumberOfGroups(address)": FunctionFragment;
    "cachedVotesByAccount(address)": FunctionFragment;
    "checkProofOfPossession(address,bytes,bytes)": FunctionFragment;
    "electabilityThreshold()": FunctionFragment;
    "electableValidators()": FunctionFragment;
    "fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getBlockNumberFromHeader(bytes)": FunctionFragment;
    "getEpochNumber()": FunctionFragment;
    "getEpochNumberOfBlock(uint256)": FunctionFragment;
    "getEpochSize()": FunctionFragment;
    "getParentSealBitmap(uint256)": FunctionFragment;
    "getVerifiedSealBitmapFromHeader(bytes)": FunctionFragment;
    "hashHeader(bytes)": FunctionFragment;
    "initialized()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "maxNumGroupsVotedFor()": FunctionFragment;
    "minQuorumSize(uint256)": FunctionFragment;
    "minQuorumSizeInCurrentSet()": FunctionFragment;
    "numberValidatorsInCurrentSet()": FunctionFragment;
    "numberValidatorsInSet(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "registry()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setRegistry(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "validatorSignerAddressFromCurrentSet(uint256)": FunctionFragment;
    "validatorSignerAddressFromSet(uint256,uint256)": FunctionFragment;
    "getVersionNumber()": FunctionFragment;
    "initialize(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setElectableValidators(uint256,uint256)": FunctionFragment;
    "getElectableValidators()": FunctionFragment;
    "setMaxNumGroupsVotedFor(uint256)": FunctionFragment;
    "setElectabilityThreshold(uint256)": FunctionFragment;
    "getElectabilityThreshold()": FunctionFragment;
    "vote(address,uint256,address,address)": FunctionFragment;
    "activate(address)": FunctionFragment;
    "activateForAccount(address,address)": FunctionFragment;
    "hasActivatablePendingVotes(address,address)": FunctionFragment;
    "revokePending(address,uint256,address,address,uint256)": FunctionFragment;
    "revokeAllActive(address,address,address,uint256)": FunctionFragment;
    "revokeActive(address,uint256,address,address,uint256)": FunctionFragment;
    "getTotalVotesByAccount(address)": FunctionFragment;
    "updateTotalVotesByAccountForGroup(address,address)": FunctionFragment;
    "getPendingVotesForGroupByAccount(address,address)": FunctionFragment;
    "getActiveVotesForGroupByAccount(address,address)": FunctionFragment;
    "getTotalVotesForGroupByAccount(address,address)": FunctionFragment;
    "getActiveVoteUnitsForGroupByAccount(address,address)": FunctionFragment;
    "getActiveVoteUnitsForGroup(address)": FunctionFragment;
    "getTotalVotesForGroup(address)": FunctionFragment;
    "getActiveVotesForGroup(address)": FunctionFragment;
    "getPendingVotesForGroup(address)": FunctionFragment;
    "getGroupEligibility(address)": FunctionFragment;
    "getGroupEpochRewards(address,uint256,uint256[])": FunctionFragment;
    "distributeEpochRewards(address,uint256,address,address)": FunctionFragment;
    "markGroupIneligible(address)": FunctionFragment;
    "markGroupEligible(address,address,address)": FunctionFragment;
    "getGroupsVotedForByAccount(address)": FunctionFragment;
    "canReceiveVotes(address,uint256)": FunctionFragment;
    "getNumVotesReceivable(address)": FunctionFragment;
    "getTotalVotes()": FunctionFragment;
    "getActiveVotes()": FunctionFragment;
    "getEligibleValidatorGroups()": FunctionFragment;
    "getTotalVotesForEligibleValidatorGroups()": FunctionFragment;
    "electValidatorSigners()": FunctionFragment;
    "electNValidatorSigners(uint256,uint256)": FunctionFragment;
    "getCurrentValidatorSigners()": FunctionFragment;
    "setAllowedToVoteOverMaxNumberOfGroups(bool)": FunctionFragment;
    "forceDecrementVotes(address,uint256,address[],address[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowedToVoteOverMaxNumberOfGroups"
      | "cachedVotesByAccount"
      | "checkProofOfPossession"
      | "electabilityThreshold"
      | "electableValidators"
      | "fractionMulExp"
      | "getBlockNumberFromHeader"
      | "getEpochNumber"
      | "getEpochNumberOfBlock"
      | "getEpochSize"
      | "getParentSealBitmap"
      | "getVerifiedSealBitmapFromHeader"
      | "hashHeader"
      | "initialized"
      | "isOwner"
      | "maxNumGroupsVotedFor"
      | "minQuorumSize"
      | "minQuorumSizeInCurrentSet"
      | "numberValidatorsInCurrentSet"
      | "numberValidatorsInSet"
      | "owner"
      | "registry"
      | "renounceOwnership"
      | "setRegistry"
      | "transferOwnership"
      | "validatorSignerAddressFromCurrentSet"
      | "validatorSignerAddressFromSet"
      | "getVersionNumber"
      | "initialize"
      | "setElectableValidators"
      | "getElectableValidators"
      | "setMaxNumGroupsVotedFor"
      | "setElectabilityThreshold"
      | "getElectabilityThreshold"
      | "vote"
      | "activate"
      | "activateForAccount"
      | "hasActivatablePendingVotes"
      | "revokePending"
      | "revokeAllActive"
      | "revokeActive"
      | "getTotalVotesByAccount"
      | "updateTotalVotesByAccountForGroup"
      | "getPendingVotesForGroupByAccount"
      | "getActiveVotesForGroupByAccount"
      | "getTotalVotesForGroupByAccount"
      | "getActiveVoteUnitsForGroupByAccount"
      | "getActiveVoteUnitsForGroup"
      | "getTotalVotesForGroup"
      | "getActiveVotesForGroup"
      | "getPendingVotesForGroup"
      | "getGroupEligibility"
      | "getGroupEpochRewards"
      | "distributeEpochRewards"
      | "markGroupIneligible"
      | "markGroupEligible"
      | "getGroupsVotedForByAccount"
      | "canReceiveVotes"
      | "getNumVotesReceivable"
      | "getTotalVotes"
      | "getActiveVotes"
      | "getEligibleValidatorGroups"
      | "getTotalVotesForEligibleValidatorGroups"
      | "electValidatorSigners"
      | "electNValidatorSigners"
      | "getCurrentValidatorSigners"
      | "setAllowedToVoteOverMaxNumberOfGroups"
      | "forceDecrementVotes"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowedToVoteOverMaxNumberOfGroups",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cachedVotesByAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkProofOfPossession",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "electabilityThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "electableValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fractionMulExp",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockNumberFromHeader",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochNumberOfBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getParentSealBitmap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifiedSealBitmapFromHeader",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hashHeader",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxNumGroupsVotedFor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minQuorumSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minQuorumSizeInCurrentSet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberValidatorsInCurrentSet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberValidatorsInSet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setRegistry", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorSignerAddressFromCurrentSet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorSignerAddressFromSet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersionNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setElectableValidators",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getElectableValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxNumGroupsVotedFor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setElectabilityThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getElectabilityThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "activate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "activateForAccount",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasActivatablePendingVotes",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePending",
    values: [string, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAllActive",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeActive",
    values: [string, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalVotesByAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTotalVotesByAccountForGroup",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingVotesForGroupByAccount",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveVotesForGroupByAccount",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalVotesForGroupByAccount",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveVoteUnitsForGroupByAccount",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveVoteUnitsForGroup",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalVotesForGroup",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveVotesForGroup",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingVotesForGroup",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getGroupEligibility",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getGroupEpochRewards",
    values: [string, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeEpochRewards",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "markGroupIneligible",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "markGroupEligible",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getGroupsVotedForByAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "canReceiveVotes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumVotesReceivable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEligibleValidatorGroups",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalVotesForEligibleValidatorGroups",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "electValidatorSigners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "electNValidatorSigners",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentValidatorSigners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedToVoteOverMaxNumberOfGroups",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "forceDecrementVotes",
    values: [string, BigNumberish, string[], string[], BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowedToVoteOverMaxNumberOfGroups",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cachedVotesByAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkProofOfPossession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electabilityThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electableValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fractionMulExp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumberFromHeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochNumberOfBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParentSealBitmap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifiedSealBitmapFromHeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashHeader", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxNumGroupsVotedFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minQuorumSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minQuorumSizeInCurrentSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberValidatorsInCurrentSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberValidatorsInSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorSignerAddressFromCurrentSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorSignerAddressFromSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVersionNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setElectableValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getElectableValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxNumGroupsVotedFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setElectabilityThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getElectabilityThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activateForAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasActivatablePendingVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAllActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalVotesByAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTotalVotesByAccountForGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingVotesForGroupByAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveVotesForGroupByAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalVotesForGroupByAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveVoteUnitsForGroupByAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveVoteUnitsForGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalVotesForGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveVotesForGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingVotesForGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGroupEligibility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGroupEpochRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeEpochRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markGroupIneligible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markGroupEligible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGroupsVotedForByAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canReceiveVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumVotesReceivable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEligibleValidatorGroups",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalVotesForEligibleValidatorGroups",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electValidatorSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electNValidatorSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentValidatorSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedToVoteOverMaxNumberOfGroups",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceDecrementVotes",
    data: BytesLike
  ): Result;

  events: {
    "AllowedToVoteOverMaxNumberOfGroups(address,bool)": EventFragment;
    "ElectabilityThresholdSet(uint256)": EventFragment;
    "ElectableValidatorsSet(uint256,uint256)": EventFragment;
    "EpochRewardsDistributedToVoters(address,uint256)": EventFragment;
    "MaxNumGroupsVotedForSet(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RegistrySet(address)": EventFragment;
    "ValidatorGroupActiveVoteRevoked(address,address,uint256,uint256)": EventFragment;
    "ValidatorGroupMarkedEligible(address)": EventFragment;
    "ValidatorGroupMarkedIneligible(address)": EventFragment;
    "ValidatorGroupPendingVoteRevoked(address,address,uint256)": EventFragment;
    "ValidatorGroupVoteActivated(address,address,uint256,uint256)": EventFragment;
    "ValidatorGroupVoteCast(address,address,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AllowedToVoteOverMaxNumberOfGroups"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ElectabilityThresholdSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ElectableValidatorsSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EpochRewardsDistributedToVoters"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxNumGroupsVotedForSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistrySet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ValidatorGroupActiveVoteRevoked"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ValidatorGroupMarkedEligible"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ValidatorGroupMarkedIneligible"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ValidatorGroupPendingVoteRevoked"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ValidatorGroupVoteActivated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorGroupVoteCast"): EventFragment;
}

export interface AllowedToVoteOverMaxNumberOfGroupsEventObject {
  account: string;
  flag: boolean;
}
export type AllowedToVoteOverMaxNumberOfGroupsEvent = TypedEvent<
  [string, boolean],
  AllowedToVoteOverMaxNumberOfGroupsEventObject
>;

export type AllowedToVoteOverMaxNumberOfGroupsEventFilter =
  TypedEventFilter<AllowedToVoteOverMaxNumberOfGroupsEvent>;

export interface ElectabilityThresholdSetEventObject {
  electabilityThreshold: BigNumber;
}
export type ElectabilityThresholdSetEvent = TypedEvent<
  [BigNumber],
  ElectabilityThresholdSetEventObject
>;

export type ElectabilityThresholdSetEventFilter =
  TypedEventFilter<ElectabilityThresholdSetEvent>;

export interface ElectableValidatorsSetEventObject {
  min: BigNumber;
  max: BigNumber;
}
export type ElectableValidatorsSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  ElectableValidatorsSetEventObject
>;

export type ElectableValidatorsSetEventFilter =
  TypedEventFilter<ElectableValidatorsSetEvent>;

export interface EpochRewardsDistributedToVotersEventObject {
  group: string;
  value: BigNumber;
}
export type EpochRewardsDistributedToVotersEvent = TypedEvent<
  [string, BigNumber],
  EpochRewardsDistributedToVotersEventObject
>;

export type EpochRewardsDistributedToVotersEventFilter =
  TypedEventFilter<EpochRewardsDistributedToVotersEvent>;

export interface MaxNumGroupsVotedForSetEventObject {
  maxNumGroupsVotedFor: BigNumber;
}
export type MaxNumGroupsVotedForSetEvent = TypedEvent<
  [BigNumber],
  MaxNumGroupsVotedForSetEventObject
>;

export type MaxNumGroupsVotedForSetEventFilter =
  TypedEventFilter<MaxNumGroupsVotedForSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RegistrySetEventObject {
  registryAddress: string;
}
export type RegistrySetEvent = TypedEvent<[string], RegistrySetEventObject>;

export type RegistrySetEventFilter = TypedEventFilter<RegistrySetEvent>;

export interface ValidatorGroupActiveVoteRevokedEventObject {
  account: string;
  group: string;
  value: BigNumber;
  units: BigNumber;
}
export type ValidatorGroupActiveVoteRevokedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ValidatorGroupActiveVoteRevokedEventObject
>;

export type ValidatorGroupActiveVoteRevokedEventFilter =
  TypedEventFilter<ValidatorGroupActiveVoteRevokedEvent>;

export interface ValidatorGroupMarkedEligibleEventObject {
  group: string;
}
export type ValidatorGroupMarkedEligibleEvent = TypedEvent<
  [string],
  ValidatorGroupMarkedEligibleEventObject
>;

export type ValidatorGroupMarkedEligibleEventFilter =
  TypedEventFilter<ValidatorGroupMarkedEligibleEvent>;

export interface ValidatorGroupMarkedIneligibleEventObject {
  group: string;
}
export type ValidatorGroupMarkedIneligibleEvent = TypedEvent<
  [string],
  ValidatorGroupMarkedIneligibleEventObject
>;

export type ValidatorGroupMarkedIneligibleEventFilter =
  TypedEventFilter<ValidatorGroupMarkedIneligibleEvent>;

export interface ValidatorGroupPendingVoteRevokedEventObject {
  account: string;
  group: string;
  value: BigNumber;
}
export type ValidatorGroupPendingVoteRevokedEvent = TypedEvent<
  [string, string, BigNumber],
  ValidatorGroupPendingVoteRevokedEventObject
>;

export type ValidatorGroupPendingVoteRevokedEventFilter =
  TypedEventFilter<ValidatorGroupPendingVoteRevokedEvent>;

export interface ValidatorGroupVoteActivatedEventObject {
  account: string;
  group: string;
  value: BigNumber;
  units: BigNumber;
}
export type ValidatorGroupVoteActivatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ValidatorGroupVoteActivatedEventObject
>;

export type ValidatorGroupVoteActivatedEventFilter =
  TypedEventFilter<ValidatorGroupVoteActivatedEvent>;

export interface ValidatorGroupVoteCastEventObject {
  account: string;
  group: string;
  value: BigNumber;
}
export type ValidatorGroupVoteCastEvent = TypedEvent<
  [string, string, BigNumber],
  ValidatorGroupVoteCastEventObject
>;

export type ValidatorGroupVoteCastEventFilter =
  TypedEventFilter<ValidatorGroupVoteCastEvent>;

export interface IElection extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ElectionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowedToVoteOverMaxNumberOfGroups(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cachedVotesByAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalVotes: BigNumber }>;

    checkProofOfPossession(
      sender: string,
      blsKey: BytesLike,
      blsPop: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    electabilityThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    electableValidators(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    fractionMulExp(
      aNumerator: BigNumberish,
      aDenominator: BigNumberish,
      bNumerator: BigNumberish,
      bDenominator: BigNumberish,
      exponent: BigNumberish,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getBlockNumberFromHeader(
      header: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEpochNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEpochNumberOfBlock(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEpochSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    getParentSealBitmap(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVerifiedSealBitmapFromHeader(
      header: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashHeader(header: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    maxNumGroupsVotedFor(overrides?: CallOverrides): Promise<[BigNumber]>;

    minQuorumSize(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minQuorumSizeInCurrentSet(overrides?: CallOverrides): Promise<[BigNumber]>;

    numberValidatorsInCurrentSet(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    numberValidatorsInSet(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRegistry(
      registryAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    validatorSignerAddressFromCurrentSet(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    validatorSignerAddressFromSet(
      index: BigNumberish,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVersionNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    initialize(
      registryAddress: string,
      minElectableValidators: BigNumberish,
      maxElectableValidators: BigNumberish,
      _maxNumGroupsVotedFor: BigNumberish,
      _electabilityThreshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setElectableValidators(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getElectableValidators(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    setMaxNumGroupsVotedFor(
      _maxNumGroupsVotedFor: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setElectabilityThreshold(
      threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getElectabilityThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    vote(
      group: string,
      value: BigNumberish,
      lesser: string,
      greater: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    activate(
      group: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    activateForAccount(
      group: string,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    hasActivatablePendingVotes(
      account: string,
      group: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    revokePending(
      group: string,
      value: BigNumberish,
      lesser: string,
      greater: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeAllActive(
      group: string,
      lesser: string,
      greater: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeActive(
      group: string,
      value: BigNumberish,
      lesser: string,
      greater: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getTotalVotesByAccount(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateTotalVotesByAccountForGroup(
      account: string,
      group: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getPendingVotesForGroupByAccount(
      group: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getActiveVotesForGroupByAccount(
      group: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalVotesForGroupByAccount(
      group: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getActiveVoteUnitsForGroupByAccount(
      group: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getActiveVoteUnitsForGroup(
      group: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalVotesForGroup(
      group: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getActiveVotesForGroup(
      group: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPendingVotesForGroup(
      group: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGroupEligibility(
      group: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getGroupEpochRewards(
      group: string,
      totalEpochRewards: BigNumberish,
      uptimes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    distributeEpochRewards(
      group: string,
      value: BigNumberish,
      lesser: string,
      greater: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    markGroupIneligible(
      group: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    markGroupEligible(
      group: string,
      lesser: string,
      greater: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getGroupsVotedForByAccount(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    canReceiveVotes(
      group: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getNumVotesReceivable(
      group: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalVotes(overrides?: CallOverrides): Promise<[BigNumber]>;

    getActiveVotes(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEligibleValidatorGroups(overrides?: CallOverrides): Promise<[string[]]>;

    getTotalVotesForEligibleValidatorGroups(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { groups: string[]; values: BigNumber[] }
    >;

    electValidatorSigners(overrides?: CallOverrides): Promise<[string[]]>;

    electNValidatorSigners(
      minElectableValidators: BigNumberish,
      maxElectableValidators: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getCurrentValidatorSigners(overrides?: CallOverrides): Promise<[string[]]>;

    setAllowedToVoteOverMaxNumberOfGroups(
      flag: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    forceDecrementVotes(
      account: string,
      value: BigNumberish,
      lessers: string[],
      greaters: string[],
      indices: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  allowedToVoteOverMaxNumberOfGroups(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cachedVotesByAccount(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkProofOfPossession(
    sender: string,
    blsKey: BytesLike,
    blsPop: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  electabilityThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  electableValidators(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

  fractionMulExp(
    aNumerator: BigNumberish,
    aDenominator: BigNumberish,
    bNumerator: BigNumberish,
    bDenominator: BigNumberish,
    exponent: BigNumberish,
    _decimals: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getBlockNumberFromHeader(
    header: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEpochNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getEpochNumberOfBlock(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEpochSize(overrides?: CallOverrides): Promise<BigNumber>;

  getParentSealBitmap(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVerifiedSealBitmapFromHeader(
    header: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  hashHeader(header: BytesLike, overrides?: CallOverrides): Promise<string>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  maxNumGroupsVotedFor(overrides?: CallOverrides): Promise<BigNumber>;

  minQuorumSize(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minQuorumSizeInCurrentSet(overrides?: CallOverrides): Promise<BigNumber>;

  numberValidatorsInCurrentSet(overrides?: CallOverrides): Promise<BigNumber>;

  numberValidatorsInSet(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRegistry(
    registryAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  validatorSignerAddressFromCurrentSet(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  validatorSignerAddressFromSet(
    index: BigNumberish,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVersionNumber(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  initialize(
    registryAddress: string,
    minElectableValidators: BigNumberish,
    maxElectableValidators: BigNumberish,
    _maxNumGroupsVotedFor: BigNumberish,
    _electabilityThreshold: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setElectableValidators(
    min: BigNumberish,
    max: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getElectableValidators(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  setMaxNumGroupsVotedFor(
    _maxNumGroupsVotedFor: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setElectabilityThreshold(
    threshold: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getElectabilityThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  vote(
    group: string,
    value: BigNumberish,
    lesser: string,
    greater: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  activate(
    group: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  activateForAccount(
    group: string,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  hasActivatablePendingVotes(
    account: string,
    group: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  revokePending(
    group: string,
    value: BigNumberish,
    lesser: string,
    greater: string,
    index: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeAllActive(
    group: string,
    lesser: string,
    greater: string,
    index: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeActive(
    group: string,
    value: BigNumberish,
    lesser: string,
    greater: string,
    index: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getTotalVotesByAccount(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateTotalVotesByAccountForGroup(
    account: string,
    group: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getPendingVotesForGroupByAccount(
    group: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getActiveVotesForGroupByAccount(
    group: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalVotesForGroupByAccount(
    group: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getActiveVoteUnitsForGroupByAccount(
    group: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getActiveVoteUnitsForGroup(
    group: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalVotesForGroup(
    group: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getActiveVotesForGroup(
    group: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingVotesForGroup(
    group: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGroupEligibility(
    group: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getGroupEpochRewards(
    group: string,
    totalEpochRewards: BigNumberish,
    uptimes: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  distributeEpochRewards(
    group: string,
    value: BigNumberish,
    lesser: string,
    greater: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  markGroupIneligible(
    group: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  markGroupEligible(
    group: string,
    lesser: string,
    greater: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getGroupsVotedForByAccount(
    account: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  canReceiveVotes(
    group: string,
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getNumVotesReceivable(
    group: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalVotes(overrides?: CallOverrides): Promise<BigNumber>;

  getActiveVotes(overrides?: CallOverrides): Promise<BigNumber>;

  getEligibleValidatorGroups(overrides?: CallOverrides): Promise<string[]>;

  getTotalVotesForEligibleValidatorGroups(
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { groups: string[]; values: BigNumber[] }
  >;

  electValidatorSigners(overrides?: CallOverrides): Promise<string[]>;

  electNValidatorSigners(
    minElectableValidators: BigNumberish,
    maxElectableValidators: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getCurrentValidatorSigners(overrides?: CallOverrides): Promise<string[]>;

  setAllowedToVoteOverMaxNumberOfGroups(
    flag: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  forceDecrementVotes(
    account: string,
    value: BigNumberish,
    lessers: string[],
    greaters: string[],
    indices: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowedToVoteOverMaxNumberOfGroups(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cachedVotesByAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkProofOfPossession(
      sender: string,
      blsKey: BytesLike,
      blsPop: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    electabilityThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    electableValidators(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { min: BigNumber; max: BigNumber }>;

    fractionMulExp(
      aNumerator: BigNumberish,
      aDenominator: BigNumberish,
      bNumerator: BigNumberish,
      bDenominator: BigNumberish,
      exponent: BigNumberish,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getBlockNumberFromHeader(
      header: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochNumberOfBlock(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochSize(overrides?: CallOverrides): Promise<BigNumber>;

    getParentSealBitmap(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVerifiedSealBitmapFromHeader(
      header: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    hashHeader(header: BytesLike, overrides?: CallOverrides): Promise<string>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    maxNumGroupsVotedFor(overrides?: CallOverrides): Promise<BigNumber>;

    minQuorumSize(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minQuorumSizeInCurrentSet(overrides?: CallOverrides): Promise<BigNumber>;

    numberValidatorsInCurrentSet(overrides?: CallOverrides): Promise<BigNumber>;

    numberValidatorsInSet(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setRegistry(
      registryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validatorSignerAddressFromCurrentSet(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    validatorSignerAddressFromSet(
      index: BigNumberish,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVersionNumber(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    initialize(
      registryAddress: string,
      minElectableValidators: BigNumberish,
      maxElectableValidators: BigNumberish,
      _maxNumGroupsVotedFor: BigNumberish,
      _electabilityThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setElectableValidators(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getElectableValidators(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    setMaxNumGroupsVotedFor(
      _maxNumGroupsVotedFor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setElectabilityThreshold(
      threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getElectabilityThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      group: string,
      value: BigNumberish,
      lesser: string,
      greater: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    activate(group: string, overrides?: CallOverrides): Promise<boolean>;

    activateForAccount(
      group: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasActivatablePendingVotes(
      account: string,
      group: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokePending(
      group: string,
      value: BigNumberish,
      lesser: string,
      greater: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeAllActive(
      group: string,
      lesser: string,
      greater: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeActive(
      group: string,
      value: BigNumberish,
      lesser: string,
      greater: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getTotalVotesByAccount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateTotalVotesByAccountForGroup(
      account: string,
      group: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getPendingVotesForGroupByAccount(
      group: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveVotesForGroupByAccount(
      group: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalVotesForGroupByAccount(
      group: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveVoteUnitsForGroupByAccount(
      group: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveVoteUnitsForGroup(
      group: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalVotesForGroup(
      group: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveVotesForGroup(
      group: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingVotesForGroup(
      group: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGroupEligibility(
      group: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getGroupEpochRewards(
      group: string,
      totalEpochRewards: BigNumberish,
      uptimes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributeEpochRewards(
      group: string,
      value: BigNumberish,
      lesser: string,
      greater: string,
      overrides?: CallOverrides
    ): Promise<void>;

    markGroupIneligible(
      group: string,
      overrides?: CallOverrides
    ): Promise<void>;

    markGroupEligible(
      group: string,
      lesser: string,
      greater: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getGroupsVotedForByAccount(
      account: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    canReceiveVotes(
      group: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getNumVotesReceivable(
      group: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalVotes(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveVotes(overrides?: CallOverrides): Promise<BigNumber>;

    getEligibleValidatorGroups(overrides?: CallOverrides): Promise<string[]>;

    getTotalVotesForEligibleValidatorGroups(
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { groups: string[]; values: BigNumber[] }
    >;

    electValidatorSigners(overrides?: CallOverrides): Promise<string[]>;

    electNValidatorSigners(
      minElectableValidators: BigNumberish,
      maxElectableValidators: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getCurrentValidatorSigners(overrides?: CallOverrides): Promise<string[]>;

    setAllowedToVoteOverMaxNumberOfGroups(
      flag: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    forceDecrementVotes(
      account: string,
      value: BigNumberish,
      lessers: string[],
      greaters: string[],
      indices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AllowedToVoteOverMaxNumberOfGroups(address,bool)"(
      account?: string | null,
      flag?: null
    ): AllowedToVoteOverMaxNumberOfGroupsEventFilter;
    AllowedToVoteOverMaxNumberOfGroups(
      account?: string | null,
      flag?: null
    ): AllowedToVoteOverMaxNumberOfGroupsEventFilter;

    "ElectabilityThresholdSet(uint256)"(
      electabilityThreshold?: null
    ): ElectabilityThresholdSetEventFilter;
    ElectabilityThresholdSet(
      electabilityThreshold?: null
    ): ElectabilityThresholdSetEventFilter;

    "ElectableValidatorsSet(uint256,uint256)"(
      min?: null,
      max?: null
    ): ElectableValidatorsSetEventFilter;
    ElectableValidatorsSet(
      min?: null,
      max?: null
    ): ElectableValidatorsSetEventFilter;

    "EpochRewardsDistributedToVoters(address,uint256)"(
      group?: string | null,
      value?: null
    ): EpochRewardsDistributedToVotersEventFilter;
    EpochRewardsDistributedToVoters(
      group?: string | null,
      value?: null
    ): EpochRewardsDistributedToVotersEventFilter;

    "MaxNumGroupsVotedForSet(uint256)"(
      maxNumGroupsVotedFor?: null
    ): MaxNumGroupsVotedForSetEventFilter;
    MaxNumGroupsVotedForSet(
      maxNumGroupsVotedFor?: null
    ): MaxNumGroupsVotedForSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RegistrySet(address)"(
      registryAddress?: string | null
    ): RegistrySetEventFilter;
    RegistrySet(registryAddress?: string | null): RegistrySetEventFilter;

    "ValidatorGroupActiveVoteRevoked(address,address,uint256,uint256)"(
      account?: string | null,
      group?: string | null,
      value?: null,
      units?: null
    ): ValidatorGroupActiveVoteRevokedEventFilter;
    ValidatorGroupActiveVoteRevoked(
      account?: string | null,
      group?: string | null,
      value?: null,
      units?: null
    ): ValidatorGroupActiveVoteRevokedEventFilter;

    "ValidatorGroupMarkedEligible(address)"(
      group?: string | null
    ): ValidatorGroupMarkedEligibleEventFilter;
    ValidatorGroupMarkedEligible(
      group?: string | null
    ): ValidatorGroupMarkedEligibleEventFilter;

    "ValidatorGroupMarkedIneligible(address)"(
      group?: string | null
    ): ValidatorGroupMarkedIneligibleEventFilter;
    ValidatorGroupMarkedIneligible(
      group?: string | null
    ): ValidatorGroupMarkedIneligibleEventFilter;

    "ValidatorGroupPendingVoteRevoked(address,address,uint256)"(
      account?: string | null,
      group?: string | null,
      value?: null
    ): ValidatorGroupPendingVoteRevokedEventFilter;
    ValidatorGroupPendingVoteRevoked(
      account?: string | null,
      group?: string | null,
      value?: null
    ): ValidatorGroupPendingVoteRevokedEventFilter;

    "ValidatorGroupVoteActivated(address,address,uint256,uint256)"(
      account?: string | null,
      group?: string | null,
      value?: null,
      units?: null
    ): ValidatorGroupVoteActivatedEventFilter;
    ValidatorGroupVoteActivated(
      account?: string | null,
      group?: string | null,
      value?: null,
      units?: null
    ): ValidatorGroupVoteActivatedEventFilter;

    "ValidatorGroupVoteCast(address,address,uint256)"(
      account?: string | null,
      group?: string | null,
      value?: null
    ): ValidatorGroupVoteCastEventFilter;
    ValidatorGroupVoteCast(
      account?: string | null,
      group?: string | null,
      value?: null
    ): ValidatorGroupVoteCastEventFilter;
  };

  estimateGas: {
    allowedToVoteOverMaxNumberOfGroups(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cachedVotesByAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkProofOfPossession(
      sender: string,
      blsKey: BytesLike,
      blsPop: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    electabilityThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    electableValidators(overrides?: CallOverrides): Promise<BigNumber>;

    fractionMulExp(
      aNumerator: BigNumberish,
      aDenominator: BigNumberish,
      bNumerator: BigNumberish,
      bDenominator: BigNumberish,
      exponent: BigNumberish,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockNumberFromHeader(
      header: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochNumberOfBlock(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochSize(overrides?: CallOverrides): Promise<BigNumber>;

    getParentSealBitmap(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVerifiedSealBitmapFromHeader(
      header: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashHeader(
      header: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    maxNumGroupsVotedFor(overrides?: CallOverrides): Promise<BigNumber>;

    minQuorumSize(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minQuorumSizeInCurrentSet(overrides?: CallOverrides): Promise<BigNumber>;

    numberValidatorsInCurrentSet(overrides?: CallOverrides): Promise<BigNumber>;

    numberValidatorsInSet(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRegistry(
      registryAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    validatorSignerAddressFromCurrentSet(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatorSignerAddressFromSet(
      index: BigNumberish,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersionNumber(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      registryAddress: string,
      minElectableValidators: BigNumberish,
      maxElectableValidators: BigNumberish,
      _maxNumGroupsVotedFor: BigNumberish,
      _electabilityThreshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setElectableValidators(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getElectableValidators(overrides?: CallOverrides): Promise<BigNumber>;

    setMaxNumGroupsVotedFor(
      _maxNumGroupsVotedFor: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setElectabilityThreshold(
      threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getElectabilityThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      group: string,
      value: BigNumberish,
      lesser: string,
      greater: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    activate(
      group: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    activateForAccount(
      group: string,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    hasActivatablePendingVotes(
      account: string,
      group: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokePending(
      group: string,
      value: BigNumberish,
      lesser: string,
      greater: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeAllActive(
      group: string,
      lesser: string,
      greater: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeActive(
      group: string,
      value: BigNumberish,
      lesser: string,
      greater: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getTotalVotesByAccount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateTotalVotesByAccountForGroup(
      account: string,
      group: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getPendingVotesForGroupByAccount(
      group: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveVotesForGroupByAccount(
      group: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalVotesForGroupByAccount(
      group: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveVoteUnitsForGroupByAccount(
      group: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveVoteUnitsForGroup(
      group: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalVotesForGroup(
      group: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveVotesForGroup(
      group: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingVotesForGroup(
      group: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGroupEligibility(
      group: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGroupEpochRewards(
      group: string,
      totalEpochRewards: BigNumberish,
      uptimes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributeEpochRewards(
      group: string,
      value: BigNumberish,
      lesser: string,
      greater: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    markGroupIneligible(
      group: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    markGroupEligible(
      group: string,
      lesser: string,
      greater: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getGroupsVotedForByAccount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canReceiveVotes(
      group: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumVotesReceivable(
      group: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalVotes(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveVotes(overrides?: CallOverrides): Promise<BigNumber>;

    getEligibleValidatorGroups(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalVotesForEligibleValidatorGroups(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    electValidatorSigners(overrides?: CallOverrides): Promise<BigNumber>;

    electNValidatorSigners(
      minElectableValidators: BigNumberish,
      maxElectableValidators: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentValidatorSigners(overrides?: CallOverrides): Promise<BigNumber>;

    setAllowedToVoteOverMaxNumberOfGroups(
      flag: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    forceDecrementVotes(
      account: string,
      value: BigNumberish,
      lessers: string[],
      greaters: string[],
      indices: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowedToVoteOverMaxNumberOfGroups(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cachedVotesByAccount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkProofOfPossession(
      sender: string,
      blsKey: BytesLike,
      blsPop: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    electabilityThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    electableValidators(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fractionMulExp(
      aNumerator: BigNumberish,
      aDenominator: BigNumberish,
      bNumerator: BigNumberish,
      bDenominator: BigNumberish,
      exponent: BigNumberish,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockNumberFromHeader(
      header: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEpochNumberOfBlock(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getParentSealBitmap(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVerifiedSealBitmapFromHeader(
      header: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashHeader(
      header: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxNumGroupsVotedFor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minQuorumSize(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minQuorumSizeInCurrentSet(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberValidatorsInCurrentSet(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberValidatorsInSet(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRegistry(
      registryAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    validatorSignerAddressFromCurrentSet(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorSignerAddressFromSet(
      index: BigNumberish,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersionNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      registryAddress: string,
      minElectableValidators: BigNumberish,
      maxElectableValidators: BigNumberish,
      _maxNumGroupsVotedFor: BigNumberish,
      _electabilityThreshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setElectableValidators(
      min: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getElectableValidators(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMaxNumGroupsVotedFor(
      _maxNumGroupsVotedFor: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setElectabilityThreshold(
      threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getElectabilityThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote(
      group: string,
      value: BigNumberish,
      lesser: string,
      greater: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    activate(
      group: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    activateForAccount(
      group: string,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    hasActivatablePendingVotes(
      account: string,
      group: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokePending(
      group: string,
      value: BigNumberish,
      lesser: string,
      greater: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeAllActive(
      group: string,
      lesser: string,
      greater: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeActive(
      group: string,
      value: BigNumberish,
      lesser: string,
      greater: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getTotalVotesByAccount(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateTotalVotesByAccountForGroup(
      account: string,
      group: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getPendingVotesForGroupByAccount(
      group: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveVotesForGroupByAccount(
      group: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalVotesForGroupByAccount(
      group: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveVoteUnitsForGroupByAccount(
      group: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveVoteUnitsForGroup(
      group: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalVotesForGroup(
      group: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveVotesForGroup(
      group: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingVotesForGroup(
      group: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGroupEligibility(
      group: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGroupEpochRewards(
      group: string,
      totalEpochRewards: BigNumberish,
      uptimes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributeEpochRewards(
      group: string,
      value: BigNumberish,
      lesser: string,
      greater: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    markGroupIneligible(
      group: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    markGroupEligible(
      group: string,
      lesser: string,
      greater: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getGroupsVotedForByAccount(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canReceiveVotes(
      group: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumVotesReceivable(
      group: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalVotes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getActiveVotes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEligibleValidatorGroups(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalVotesForEligibleValidatorGroups(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    electValidatorSigners(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    electNValidatorSigners(
      minElectableValidators: BigNumberish,
      maxElectableValidators: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentValidatorSigners(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAllowedToVoteOverMaxNumberOfGroups(
      flag: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    forceDecrementVotes(
      account: string,
      value: BigNumberish,
      lessers: string[],
      greaters: string[],
      indices: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
